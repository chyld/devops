# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/chyld/.bin/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/chyld/.bin/miniconda/etc/profile.d/conda.sh" ]; then
        . "/home/chyld/.bin/miniconda/etc/profile.d/conda.sh"
    else
        export PATH="/home/chyld/.bin/miniconda/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

BIN_PATH=$HOME/.bin
NVIM_PATH=$HOME/.bin/nvim/bin
NODE_PATH=$HOME/.bin/node/bin
SCRIPTS_PATH=$HOME/Code/devops/scripts
export PATH=$BIN_PATH:$NVIM_PATH:$NODE_PATH:$SCRIPTS_PATH:$PATH

alias eb="vi ~/.bash_custom" # edit bash
alias sb="source ~/.bash_custom" # source bash
alias dev="cd ~/Code/devops" # devops
alias dots="cd ~/Code/devops/platforms/mint-ubuntu/v014" # dot files
alias nv="cd ~/.config/nvim" # neovim
alias c="clear"
alias b="cd .." # go back
alias t="tree -a -I .git"
alias vi="nvim"
alias vim="nvim"
alias cat="bat"
alias g="git"
alias gs="git status"
alias gd="git diff"
alias jl="jupyter lab"
alias l="exa --icons --git -a"
alias ll="exa --icons --git -al"
alias cl="c;l"
alias cll="c;ll"

# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #

view_env_variables_by_process_id() {
    pid=$1
    cat /proc/"$pid"/environ | tr '\0' '\n' > env.txt

    $(python - "$PATH" <<-EOF
		with open("env.txt", "r") as file:
    		lines = file.readlines()
		modified_lines = [line.replace("=", ",", 1) for line in lines]
		with open("env.csv", "w") as file:
    		file.writelines(modified_lines)
		EOF
    )

    cat env.csv
}

sd() {
    # synd dot files to github
    current_dir=$(pwd)
    cd ~/Code/devops
    git status
    git add .
    git commit -am "auto sync"
    git push
    cd "$current_dir"
}

path() {
    # i setup a keybinding in vscode to manually insert tabs
    # in nvim, "control + v, then tab" will force a tab insert
    # <<-EOF will auto strip out any tabs before sending to python
    # the python process is reading args + code via stdin
    path_multi_line=$(python - "$PATH" <<-EOF
		import sys
		get_path_from_bash = sys.argv[1]
		post_processed = '\n'.join(get_path_from_bash.split(':'))
		print(post_processed)
		EOF
    )
    echo "$path_multi_line" | nl
}

x() {
    cd ~/Xplore
}

xl() {
    cd ~/Xplore
    exa -Ta --level 2 --icons --sort created
}

xc() {
    destination=$(xplore.py)   # destination reads stdout from xplore.py
    retval=$?                  # capture the return value before it changes
    if [ $retval -eq 3 ]; then # should be 3
        cd $destination
        touch README.md main.py index.js
        cp $HOME/Code/devops/templates/physics.ipynb .
        git init
        git add .
        git commit -m "Commit Zero"
        git log
        ll
    fi
}

# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #

conda activate prometheus

eval "$(starship init bash)"
