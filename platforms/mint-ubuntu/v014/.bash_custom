# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/chyld/.bin/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/chyld/.bin/miniconda/etc/profile.d/conda.sh" ]; then
        . "/home/chyld/.bin/miniconda/etc/profile.d/conda.sh"
    else
        export PATH="/home/chyld/.bin/miniconda/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #

BIN_PATH=$HOME/.bin
BTOP_PATH=$HOME/.bin/btop/bin
NVIM_PATH=$HOME/.bin/nvim/bin
NODE_PATH=$HOME/.bin/node/bin
SCRIPTS_PATH=$HOME/Code/devops/scripts
export PATH=$BIN_PATH:$BTOP_PATH:$NVIM_PATH:$NODE_PATH:$SCRIPTS_PATH:$PATH

# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #

alias eb="vi ~/.bash_custom" # edit bash
alias sb="source ~/.bash_custom" # source bash
alias dev="cd ~/Code/devops" # devops
alias dots="cd ~/Code/devops/platforms/mint-ubuntu/v014" # dot files
alias nv="cd ~/.config/nvim" # neovim
alias bin="cd ~/.bin"
alias dl="cd ~/Downloads"
alias c="clear"
alias b="cd .." # go back
alias t="tree -a -I .git"
alias vi="nvim"
alias vim="nvim"
alias cat="bat"
alias g="git"
alias gs="git status"
alias gd="git diff"
alias jl="jupyter lab"
alias l="lsd -a --group-directories-first" # "exa --icons --git -a"
alias ll="exa --icons --git -al --group-directories-first"
alias cl="c;l"
alias cll="c;ll"
alias pbcopy="wl-copy"
alias pbpaste="wl-paste"

# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #

# NOTE ABOUT MIXING LANGUAGES
#
# if you want to embed a langugae like python, js or lua in a bash function,
# then you should prefix your code with tabs, \t. when this runs, due
# to the "<<-EOF", bash will strip out all the tabs BEFORE it sends it
# to the language server. this keeps the code here nice looking.
# You can still add spaces to your code, but only after your baseline tabs.
#
# all processes have to read from files, but the inline code does not have a filename,
# so it is read in via stdin, which is a pseudo-file, the "python -", means read the file
# on stdin.
#
# i setup a keybinding in vscode to manually insert tabs (control, option, command, t)
# in nvim, "control + v, then tab" will force a tab insert

view_env_variables_by_process_id() {
    pid=$1
    cat /proc/"$pid"/environ | tr '\0' '\n' > env.txt

    $(python - <<-EOF
		with open("env.txt", "r") as file:
		    lines = file.readlines() # leave the final spaces, do not strip out
		modified_lines = [line.replace("=", ",", 1) for line in lines]
		with open("env.csv", "w") as file:
		    file.writelines(modified_lines) # leave the final spaces, do not strip out
		EOF
    )

    cat env.csv
}

sd() {
    # synd dot files to github
    current_dir=$(pwd)
    cd ~/Code/devops
    git status
    git add .
    git commit -am "auto sync"
    git push
    cd "$current_dir"
}

path() {
    path_multi_line=$(python - "$PATH" <<-EOF # passing $PATH in, not needed
		import sys                            # not needed, using bash variable expansion
		get_path_from_bash = "$PATH"          # sys.argv[1] not needed, $PATH is expanded by bash before script is run
		post_processed = '\n'.join(get_path_from_bash.split(':'))
		print(post_processed)
		EOF
    )
    echo "$path_multi_line" | nl
}

x() {
    cd ~/Xplore
}

xl() {
    cd ~/Xplore
    lsd --tree --depth 2 -ar --sort time --group-directories-first # exa -Ta --level 2 --icons --sort created
}

xc() {
    destination=$(xplore.py)   # destination reads stdout from xplore.py
    retval=$?                  # capture the return value before it changes
    if [ $retval -eq 3 ]; then # should be 3
        cd $destination
        touch README.md alpha.py beta.js gamma.lua
        cp $HOME/Code/devops/templates/physics.ipynb .
        git init
        git add .
        git commit -m "Commit Zero"
        git log
        ll
    fi
}

# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #

conda activate prometheus

eval "$(starship init bash)"

source ~/.fzf.bash

# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #
# ---------------------------------------------------------------------- #

